{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"setting":{
		"prefix": "snpSetting",
		"description": "プラグインパラメータの捕縛用です。",
		"body": [
			"function getParam(){ return PluginManager.parameters('$TM_FILENAME_BASE');  }",
			"const setting = (function(){",
			"    const param =getParam();",
			"    const result ={};",
			"    return result;",
			"})();"
		],
	},

	"menuComand":{
		"prefix": "snpMenuCommand",
		"description": "メニューコマンドに新規の要素を追加します。",
		"body": [
			"const Window_MenuCommand_addOriginalCommands= Window_MenuCommand.prototype.addOriginalCommands;",
			"Window_MenuCommand.prototype.addOriginalCommands =function(){",
			"    Window_MenuCommand_addOriginalCommands.call(this);",
			"};"
		]
	},
	"actorNewMember":{
		"prefix": "snpActorNewMember",
		"description": "アクターに新しいメンバ変数を追加します。",
		"body": [

			"/**",
			"* @param {Game_Actor} actor",
			"* @returns {T}",
     		"*/",
			"function getnewMember$TM_FILENAME_BASE(actor){",
			"    return actor._m$TM_FILENAME_BASE;",
			"}",
			"Game_Actor.prototype.newMember$TM_FILENAME_BASE =function(){",
			"   if(!this._m$TM_FILENAME_BASE){ this._m$TM_FILENAME_BASE = new  $0();}",
			"};",
			"const Game_Actor_initMembers =Game_Actor.prototype.initMembers",
			"Game_Actor.prototype.initMembers =function(){",
			"    Game_Actor_initMembers.call(this);",
			"    this.newMember$TM_FILENAME_BASE();",
			"}",
			"function initAllActor(){ ",
			"    for(const actor of $$gameActors._data){ ",
			"       if(actor){ actor.newMember$TM_FILENAME_BASE();}",
			"    }",
			" }",
			"const DataManager_extractSaveContents=DataManager.extractSaveContents;",
			"DataManager.extractSaveContents =function(contents){",
			"    DataManager_extractSaveContents.call(this,contents);",
			"    initAllActor();",
			"};"

		],

	},
	
	"onLoadOrNewGame":{
		"prefix": "snpOnload",
		"body": [
			"function onLoadOrNewGame() {",
			"",
		"}",
		"const DataManager_createGameObjects=DataManager.createGameObjects;",
		"DataManager.createGameObjects=function() {",
		"        DataManager_createGameObjects.call(this);",
		"        onLoadOrNewGame();",
		"};",
		"const DataManager_extractSaveContents =DataManager.extractSaveContents;",
		"DataManager.extractSaveContents = function(contents){",
		"       DataManager_extractSaveContents.call(this,contents);",
		"       onLoadOrNewGame();",
		"};"
		]
	}
}